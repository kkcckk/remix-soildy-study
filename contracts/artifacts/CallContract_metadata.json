{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract OtherContract",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "callGetX",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "callGetX2",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "x",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "x",
						"type": "uint256"
					}
				],
				"name": "callSetX",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "x",
						"type": "uint256"
					}
				],
				"name": "setTransferEth",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"callGetX(address)": {
					"notice": "第二种，传入合约变量，直接传入合约的引用，去调用相关函数的运行,即传入的参数的类型由adress变为合约的名称，如下， 由于我们是在调用合约OtherContract里面的函数，所以直接传入 OtherContract _address，传入的_adress是一个地址值， 但是类型由address->OtherContract，因为编译器会在编译的时候自动封装一个OtherContract(_address)的引用，会指向对应的合约"
				},
				"callGetX2(address)": {
					"notice": "第三种，其实是第一种的变种，先创建一个合约，以便后面服用"
				},
				"callSetX(address,uint256)": {
					"notice": "第一种，传入合约地址，生成合约的引用，通过合约的引用调用其函数 用法：合约名称(合约地址).合约函数(函数参数);"
				},
				"setTransferEth(address,uint256)": {
					"notice": "第四种，和调用call的方式一样 如果函数有payable修饰，表明是可以接收转账的，所以调用方式为 合约名称(合约地址).函数名称{value: 转账金额}(函数参数); 同意的，此合约的函数也得被payable修饰"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/CallContract.sol": "CallContract"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/CallContract.sol": {
			"keccak256": "0xb68fd7a110c03949a0f343b9b54da7f1e29993641980a0b81a135e0b7f17ee98",
			"license": "MIT",
			"urls": [
				"bzz-raw://ae1e3c7313897110570261354582f46406af54dbbb59c88ee34b0d28eb1927bd",
				"dweb:/ipfs/QmXRKqNmpJPUFKwsSuefkLsvKHU2LYk1W9E1RY1vE1ko5n"
			]
		}
	},
	"version": 1
}