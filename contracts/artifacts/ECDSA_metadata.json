{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "hash",
						"type": "bytes32"
					}
				],
				"name": "toEthSignedMessageHash",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "数字签名步骤 1. 先对数据进行哈希，使用keccak256函数 2. 在进行以太坊签名，使用'\\x19Ethereum Signed Message:\\n32'和哈希后的数据再进行一次哈希 3. 签名 - 利用钱包签名，常用的是metamask，进行签名的时候只需要输入钱包的地址和消息，就可以进行签名 - 利用web3.py签名，利用python代码签名，请见py文件夹中signature_with_web3.py文件 4. 验证签名，利用消息hash和签名，解析出公钥，与实际的公钥做对比，验证签名是否正确，‘ 使用的是RSV签名算法去验证(Recovery ID(v), Signature(s, r)) r: 签名的前 32 字节。 s: 签名的后 32 字节。 v: 恢复标志，用于恢复签名者的公钥。通常为 27 或 28。",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/SignatureNFT.sol": "ECDSA"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/SignatureNFT.sol": {
			"keccak256": "0x8bb6c0075c320c1e3261d3e545bd179e6fdeabdfb369ebe90ecdeec8e9b71880",
			"license": "MIT",
			"urls": [
				"bzz-raw://9d9b34d78eff8e36d0e33e99f888da88db53458b04c2d5138d78a3f91962243d",
				"dweb:/ipfs/QmPustGipsGQKwiJz4k55Wb4AQdipPUHntinCaduxF8ByP"
			]
		}
	},
	"version": 1
}